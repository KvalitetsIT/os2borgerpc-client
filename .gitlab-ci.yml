# Chronologically specify the pipeline stages to run
stages:
  - lint

# Common settings for linters to avoid code repetition
# Needs can be used to specify dependencies
# Allow failure is whether the pipeline succeeds on failure or not
.lint-default: &lint-default
  stage: lint
  needs: []
  services: []
  allow_failure: false

Lint shell scripts:
  <<: *lint-default
  image: koalaman/shellcheck-alpine:latest
  before_script:
    - apk add fd
  script:
    - printf 'Running shellcheck:'
    - printf '%s\n' 'https://github.com/koalaman/shellcheck/wiki/Checks'
    - fd . bin/ --exec shellcheck --exclude SC1071
    # Shellcheck the extension-less scripts in bin/
  #after_script:
  #  - fd --extension sh --exclude bin --exec shellcheck
  # shellcheck sh files with extensions everywhere else

#  Keep the python version in sync with what's in production
#  Consider using black instead?
#  It's split into multiple script blocks as otherwise the pipeline succeeds even if the first command fails
Lint python scripts:
  <<: *lint-default
  image: python:3.6-alpine
  before_script:
    - pip install flake8
    - apk add file fd
#    - pip install black
  script:
    - flake8 --version
    - flake8 --exclude bin
  # Avoid
  after_script:
    - fd . bin/ --exec sh -c 'if file "{}" | grep -iq python ; then flake8 "{}"; fi' 
    #- for f in bin/*; do if file "$f" | grep -iq python ; then flake8 "$f"; fi; done
    #- fd --extension py --exec black --diff
    # for loop only checked a single file so using fd exec instead
    #- for f in $(fd . bin/); do if file "$f" | grep -iq python ; then flake8 "$f"; fi; done
    # flake8 extensionless python files in bin/
